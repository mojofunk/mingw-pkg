#!/bin/bash

# Ardour generates version info from git describe output and then writes it
# into a revision.cc file during configure/build. Unfortunately as the
# information is needed here to define package versions etc which is before any
# source code configuring etc. This is roughly what is contained in
# ARDOUR_SRC_DIR/tools/define_versions.sh or should be.
function define_version_env
{
	GIT_DESCRIBE=`git describe HEAD`

	GIT_REV_REGEXP='([0-9][0-9]*)\.([0-9][0-9]*)\-?(rc[0-9]*)?-?([0-9][0-9]*)?(-g([a-f0-9]+))?'

	MAJOR_VERSION=`echo "$GIT_DESCRIBE" | sed -r -e "s/$GIT_REV_REGEXP/\1/"`
	MINOR_VERSION=`echo "$GIT_DESCRIBE" | sed -r -e "s/$GIT_REV_REGEXP/\2/"`
	RC=`echo "$GIT_DESCRIBE" | sed -r -e "s/$GIT_REV_REGEXP/\3/"`
	REVISION=`echo "$GIT_DESCRIBE" | sed -r -e "s/$GIT_REV_REGEXP/\4/"`
	COMMIT=`echo "$GIT_DESCRIBE" | sed -r -e "s/$GIT_REV_REGEXP/\6/"`

	if [ "x$RC" != "x" ] ; then
    	REVCOUNT=$RC${REVISION:+.$REVISION}
	elif [ "x$REVISION" != "x" ] ; then
    	REVCOUNT=$REVISION
	fi

	VERSION=${MAJOR_VERSION}.${MINOR_VERSION}${REVCOUNT:+.$REVCOUNT}
}

function define_package_env
{
	PKG_NAME='ardour'

	COMMON_DEPS="gtk+-2.0 portaudio-devel lv2 midifilter.lv2"

	if [ -n "$MINGW_PKG_ENABLE_DEBUG" ]; then
		PKG_DEPS="$COMMON_DEPS gdb portaudio-tests"
	else
		PKG_DEPS="$COMMON_DEPS"
	fi

	if [ -z "$ARDOUR_SRC_DIR" ]; then
		echo "You must define ARDOUR_SRC_DIR in environment to build this package"
		exit 1
	fi

	cd "$ARDOUR_SRC_DIR" || exit 1 

	if [ -n "$ARDOUR_BRANCH" ]; then
		git checkout $ARDOUR_BRANCH || exit 1
	fi

	ARDOUR_BRANCH=`git rev-parse --abbrev-ref HEAD`

	define_version_env

	if [ $ARDOUR_BRANCH = "master" ]; then
		PKG_VERSION=$VERSION
	else
		PKG_VERSION=$VERSION-$ARDOUR_BRANCH
	fi

	cd - || exit 1

	PRODUCT_NAME=${PRODUCT_NAME:=ardour}
	PROGRAM_NAME=${PROGRAM_NAME:=Ardour}

	# derived variables
	PRODUCT_ID=${PROGRAM_NAME}${MAJOR_VERSION}
	PRODUCT_EXE=${PRODUCT_NAME}-${VERSION}.exe
	PRODUCT_ICON=${PRODUCT_NAME}.ico
}

function prep
{
	PKG_BUILD_DIR="$MINGW_PKG_BUILD_DIR/$PKG_NAME-$ARDOUR_BRANCH-$ARCH"

	echo $PKG_BUILD_DIR

	rsync -av --delete --exclude /build "$ARDOUR_SRC_DIR"/ "$PKG_BUILD_DIR" || exit 1

	echo $PKG_BUILD_DIR
	cd $PKG_BUILD_DIR || exit 1
}

function build
{
	COMMON_OPTIONS=${COMMON_OPTIONS:="--noconfirm --use-external-libs --windows-vst --dist-target=mingw --program-name=${PROGRAM_NAME}"}
	PATH_OPTIONS=${PATH_OPTIONS:="--prefix=/ --configdir=/share"}
	BACKEND_OPTIONS=${BACKEND_OPTIONS:="--with-backends=dummy,portaudio"}

	if [ -n "$MINGW_PKG_ENABLE_DEBUG" ]; then
		BUILD_FLAGS="--debug"
		TEST_OPTIONS=${TEST_OPTIONS:="--test --single-tests"}
	else
		BUILD_FLAGS="--optimize"
	fi

	$PYTHON ./waf configure $COMMON_OPTIONS $PATH_OPTIONS $TEST_OPTIONS \
	                        $BACKEND_OPTIONS $BUILD_FLAGS || exit 1
	$PYTHON ./waf "$@" || exit 1
}

function install
{
	BUILD_DIR=build
	BUILD_CACHE_FILE=$BUILD_DIR/c4che/_cache.py

	STATEFILE_SUFFIX=ardour # see filename_extensions.cc

	if grep -q "BUILD_TESTS = True" $BUILD_CACHE_FILE; then
		WITH_TESTS=1
	fi

	DATA_DIRNAME=${PRODUCT_NAME}${MAJOR_VERSION}
	DATA_DIR="$PKG_SHARE_DIR/${DATA_DIRNAME}"

	$PYTHON ./waf --destdir=$PKG_INSTALL_DIR install || exit 1

	echo "Moving Ardour dll's and executable to $PKG_BIN_DIR ..."

	mv "$PKG_LIB_DIR/$DATA_DIRNAME"/*.dll "$PKG_BIN_DIR" || exit 1
	mv "$PKG_LIB_DIR/$DATA_DIRNAME"/*.exe $PKG_BIN_DIR || exit 1

	echo "Overwriting icon files ..."

	cp "$PKG_BUILD_DIR/gtk2_ardour/icons/cursor_square/"* "$DATA_DIR/icons/"

	echo "Deleting import libs ..."

	rm "$PKG_LIB_DIR"/*dll.a

	# delete exec helper script
	rm $PKG_BIN_DIR/$PRODUCT_NAME$MAJOR_VERSION || exit 1

	if test x$WITH_TESTS != x ; then
		echo "Copying tests and test data to $PKG_INSTALL_DIR ..."
		cp $BUILD_DIR/libs/pbd/run-tests.exe $PKG_BIN_DIR/pbd-run-tests.exe
		cp -r libs/pbd/test $PKG_INSTALL_DIR/pbd_testdata

		cp $BUILD_DIR/libs/midi++2/run-tests.exe $PKG_BIN_DIR/midipp-run-tests.exe

		cp $BUILD_DIR/libs/evoral/run-tests.exe $PKG_BIN_DIR/evoral-run-tests.exe
		mkdir -p $PKG_INSTALL_DIR/evoral_testdata
		cp -r libs/evoral/test/testdata/* $PKG_INSTALL_DIR/evoral_testdata

		cp -r libs/ardour/test/data $PKG_INSTALL_DIR/ardour_testdata
	fi

	#cp $TOOLS_DIR/README $PKG_INSTALL_DIR

	# move all lv2 bundles into ardour lv2 bundle path
	if [ -d "$PKG_LIB_DIR/lv2" ]; then
		mv "$PKG_LIB_DIR"/lv2/* "$PKG_LIB_DIR/$DATA_DIRNAME/lv2"
	fi

SRC_DIRS='
libs/ardour
libs/backends
libs/pbd
libs/gtkmm2ext
libs/midi++2
libs/evoral
libs/panners
libs/timecode
libs/audiographer
'

	if [ -n "$MINGW_PKG_ENABLE_DEBUG" ]; then
		PKG_SRC_DIR=$PKG_INSTALL_DIR/src
		echo "Copying source files to $PKG_SRC_DIR ..."
		mkdir -p $PKG_SRC_DIR/libs
		cp -r gtk2_ardour $PKG_SRC_DIR
		for i in $SRC_DIRS;
		do
		cp -r $i $PKG_SRC_DIR/libs
		done
		. $MINGW_PKG_DIRECTORY/make-debug-script.sh
	else
		echo "Optimized build Stripping executable ..."
		find $PKG_INSTALL_DIR -type f -name "*.exe*" | xargs $STRIP
		echo "Stripping libraries ..."
		find $PKG_INSTALL_DIR -type f -name "*.dll*" | xargs $STRIP
	fi
}

function clean ()
{
	echo "Ardour clean"
	if [ -d "$BUILD_DIR" ]; then
		echo "Removing $BUILD_DIR"
		rm -rf "$BUILD_DIR" || exit 1
	fi
	if [ -d "$PKG_INSTALL_DIR" ]; then
		echo "Removing $PKG_INSTALL_DIR"
		rm -rf "$PKG_INSTALL_DIR" || exit 1
	fi
}
